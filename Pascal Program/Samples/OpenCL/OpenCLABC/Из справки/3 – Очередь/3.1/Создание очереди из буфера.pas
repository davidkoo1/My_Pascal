uses OpenCLABC;

begin
  var b := new Buffer( 3*sizeof(integer) ); // Буфер достаточного размера чтоб содержать 3 значения типа integer. 
  
  // Создаём очередь
  var q := b.NewQueue;
  
  // Добавлять команды в полученную очередь можно вызывая соответствующие методы
  q.AddWriteValue(1, 0*sizeof(integer) );
  
  // Методы, добавляющие команду в очередь - возвращают очередь, для которой их вызвали (не копию а ссылку на оригинал)
  // Поэтому можно добавлять по несколько команд в 1 строчке:
  q.AddWriteValue(5, 1*sizeof(integer) ).AddWriteValue(7, 2*sizeof(integer) );
  // Все команды в q будут выполнятся последовательно, что не всегда хорошо
  // Если надо выполнять параллельно - создавайте несколько "b.NewQueue" и умножайте друг на друга
  
  // В данной версии надо писать "as CommandQueue<...>" при использовании [Buffer/Kernel]CommandQueue вместо CommandQueue<...>, из за бага компилятора
  Context.Default.SyncInvoke(q as CommandQueue<Buffer>);
  
  // Вообще чтение тоже надо делать через очереди, но для простого примера - и неявные очереди подходят
  b.GetArray1&<integer>(3).Println;
  
end.